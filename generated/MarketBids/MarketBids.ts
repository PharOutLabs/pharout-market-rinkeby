// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class BidEntered extends ethereum.Event {
  get params(): BidEntered__Params {
    return new BidEntered__Params(this);
  }
}

export class BidEntered__Params {
  _event: BidEntered;

  constructor(event: BidEntered) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class BidRefunded extends ethereum.Event {
  get params(): BidRefunded__Params {
    return new BidRefunded__Params(this);
  }
}

export class BidRefunded__Params {
  _event: BidRefunded;

  constructor(event: BidRefunded) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BidWithdrawn extends ethereum.Event {
  get params(): BidWithdrawn__Params {
    return new BidWithdrawn__Params(this);
  }
}

export class BidWithdrawn__Params {
  _event: BidWithdrawn;

  constructor(event: BidWithdrawn) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BlindBidAccepted extends ethereum.Event {
  get params(): BlindBidAccepted__Params {
    return new BlindBidAccepted__Params(this);
  }
}

export class BlindBidAccepted__Params {
  _event: BlindBidAccepted;

  constructor(event: BlindBidAccepted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blindBidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class BlindBidWithdrawn extends ethereum.Event {
  get params(): BlindBidWithdrawn__Params {
    return new BlindBidWithdrawn__Params(this);
  }
}

export class BlindBidWithdrawn__Params {
  _event: BlindBidWithdrawn;

  constructor(event: BlindBidWithdrawn) {
    this._event = event;
  }

  get blindBidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BlindBidentered extends ethereum.Event {
  get params(): BlindBidentered__Params {
    return new BlindBidentered__Params(this);
  }
}

export class BlindBidentered__Params {
  _event: BlindBidentered;

  constructor(event: BlindBidentered) {
    this._event = event;
  }

  get isSpecified(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blindBidId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1155(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collectionBid(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get bidder(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class FundsForwarded extends ethereum.Event {
  get params(): FundsForwarded__Params {
    return new FundsForwarded__Params(this);
  }
}

export class FundsForwarded__Params {
  _event: FundsForwarded;

  constructor(event: FundsForwarded) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketBids__fetchBidItemByIdResultBidStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get bidder(): Address {
    return this[5].toAddress();
  }

  get seller(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids__fetchBidItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get bidder(): Address {
    return this[5].toAddress();
  }

  get seller(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids__fetchBidItemsByBidderResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get bidder(): Address {
    return this[5].toAddress();
  }

  get seller(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids__fetchBlindBidItemByIdResultBidStruct extends ethereum.Tuple {
  get specific(): boolean {
    return this[0].toBoolean();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get collectionBid(): Address {
    return this[5].toAddress();
  }

  get bidder(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids__fetchBlindBidItemsResultValue0Struct extends ethereum.Tuple {
  get specific(): boolean {
    return this[0].toBoolean();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get collectionBid(): Address {
    return this[5].toAddress();
  }

  get bidder(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids__fetchBlindBidItemsByBidderResultValue0Struct extends ethereum.Tuple {
  get specific(): boolean {
    return this[0].toBoolean();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get bidId(): BigInt {
    return this[2].toBigInt();
  }

  get bidValue(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get collectionBid(): Address {
    return this[5].toAddress();
  }

  get bidder(): Address {
    return this[6].toAddress();
  }
}

export class MarketBids extends ethereum.SmartContract {
  static bind(address: Address): MarketBids {
    return new MarketBids("MarketBids", address);
  }

  DEV(): Bytes {
    let result = super.call("DEV", "DEV():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEV(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEV", "DEV():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MARKET(): Bytes {
    let result = super.call("MARKET", "MARKET():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MARKET(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MARKET", "MARKET():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NFT(): Bytes {
    let result = super.call("NFT", "NFT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_NFT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("NFT", "NFT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OFFERS(): Bytes {
    let result = super.call("OFFERS", "OFFERS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OFFERS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OFFERS", "OFFERS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROXY_ROLE(): Bytes {
    let result = super.call("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PROXY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REWARDS(): Bytes {
    let result = super.call("REWARDS", "REWARDS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_REWARDS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("REWARDS", "REWARDS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRADES(): Bytes {
    let result = super.call("TRADES", "TRADES():(bytes32)", []);

    return result[0].toBytes();
  }

  try_TRADES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("TRADES", "TRADES():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  acceptBidForNft(bidId: Array<BigInt>): boolean {
    let result = super.call(
      "acceptBidForNft",
      "acceptBidForNft(uint256[]):(bool)",
      [ethereum.Value.fromUnsignedBigIntArray(bidId)]
    );

    return result[0].toBoolean();
  }

  try_acceptBidForNft(bidId: Array<BigInt>): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptBidForNft",
      "acceptBidForNft(uint256[]):(bool)",
      [ethereum.Value.fromUnsignedBigIntArray(bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  acceptBlindBid(
    blindBidId: Array<BigInt>,
    tokenId: Array<BigInt>,
    listedId: Array<BigInt>,
    is1155: Array<boolean>
  ): boolean {
    let result = super.call(
      "acceptBlindBid",
      "acceptBlindBid(uint256[],uint256[],uint256[],bool[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(blindBidId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromUnsignedBigIntArray(listedId),
        ethereum.Value.fromBooleanArray(is1155)
      ]
    );

    return result[0].toBoolean();
  }

  try_acceptBlindBid(
    blindBidId: Array<BigInt>,
    tokenId: Array<BigInt>,
    listedId: Array<BigInt>,
    is1155: Array<boolean>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptBlindBid",
      "acceptBlindBid(uint256[],uint256[],uint256[],bool[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(blindBidId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromUnsignedBigIntArray(listedId),
        ethereum.Value.fromBooleanArray(is1155)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bidMin(): BigInt {
    let result = super.call("bidMin", "bidMin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidMin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidMin", "bidMin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchBidId(marketId: BigInt): BigInt {
    let result = super.call("fetchBidId", "fetchBidId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toBigInt();
  }

  try_fetchBidId(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fetchBidId", "fetchBidId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchBidItemById(
    tokenId: BigInt
  ): MarketBids__fetchBidItemByIdResultBidStruct {
    let result = super.call(
      "fetchBidItemById",
      "fetchBidItemById(uint256):((uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<MarketBids__fetchBidItemByIdResultBidStruct>(
      result[0].toTuple()
    );
  }

  try_fetchBidItemById(
    tokenId: BigInt
  ): ethereum.CallResult<MarketBids__fetchBidItemByIdResultBidStruct> {
    let result = super.tryCall(
      "fetchBidItemById",
      "fetchBidItemById(uint256):((uint256,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketBids__fetchBidItemByIdResultBidStruct>(
        value[0].toTuple()
      )
    );
  }

  fetchBidItems(): Array<MarketBids__fetchBidItemsResultValue0Struct> {
    let result = super.call(
      "fetchBidItems",
      "fetchBidItems():((uint256,uint256,uint256,uint256,uint256,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      MarketBids__fetchBidItemsResultValue0Struct
    >();
  }

  try_fetchBidItems(): ethereum.CallResult<
    Array<MarketBids__fetchBidItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchBidItems",
      "fetchBidItems():((uint256,uint256,uint256,uint256,uint256,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketBids__fetchBidItemsResultValue0Struct>()
    );
  }

  fetchBidItemsByBidder(
    bidder: Address
  ): Array<MarketBids__fetchBidItemsByBidderResultValue0Struct> {
    let result = super.call(
      "fetchBidItemsByBidder",
      "fetchBidItemsByBidder(address):((uint256,uint256,uint256,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(bidder)]
    );

    return result[0].toTupleArray<
      MarketBids__fetchBidItemsByBidderResultValue0Struct
    >();
  }

  try_fetchBidItemsByBidder(
    bidder: Address
  ): ethereum.CallResult<
    Array<MarketBids__fetchBidItemsByBidderResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchBidItemsByBidder",
      "fetchBidItemsByBidder(address):((uint256,uint256,uint256,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketBids__fetchBidItemsByBidderResultValue0Struct
      >()
    );
  }

  fetchBlindBidItemById(
    bidId: BigInt
  ): MarketBids__fetchBlindBidItemByIdResultBidStruct {
    let result = super.call(
      "fetchBlindBidItemById",
      "fetchBlindBidItemById(uint256):((bool,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(bidId)]
    );

    return changetype<MarketBids__fetchBlindBidItemByIdResultBidStruct>(
      result[0].toTuple()
    );
  }

  try_fetchBlindBidItemById(
    bidId: BigInt
  ): ethereum.CallResult<MarketBids__fetchBlindBidItemByIdResultBidStruct> {
    let result = super.tryCall(
      "fetchBlindBidItemById",
      "fetchBlindBidItemById(uint256):((bool,uint256,uint256,uint256,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketBids__fetchBlindBidItemByIdResultBidStruct>(
        value[0].toTuple()
      )
    );
  }

  fetchBlindBidItems(): Array<
    MarketBids__fetchBlindBidItemsResultValue0Struct
  > {
    let result = super.call(
      "fetchBlindBidItems",
      "fetchBlindBidItems():((bool,uint256,uint256,uint256,uint256,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      MarketBids__fetchBlindBidItemsResultValue0Struct
    >();
  }

  try_fetchBlindBidItems(): ethereum.CallResult<
    Array<MarketBids__fetchBlindBidItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchBlindBidItems",
      "fetchBlindBidItems():((bool,uint256,uint256,uint256,uint256,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketBids__fetchBlindBidItemsResultValue0Struct>()
    );
  }

  fetchBlindBidItemsByBidder(
    bidder: Address
  ): Array<MarketBids__fetchBlindBidItemsByBidderResultValue0Struct> {
    let result = super.call(
      "fetchBlindBidItemsByBidder",
      "fetchBlindBidItemsByBidder(address):((bool,uint256,uint256,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(bidder)]
    );

    return result[0].toTupleArray<
      MarketBids__fetchBlindBidItemsByBidderResultValue0Struct
    >();
  }

  try_fetchBlindBidItemsByBidder(
    bidder: Address
  ): ethereum.CallResult<
    Array<MarketBids__fetchBlindBidItemsByBidderResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchBlindBidItemsByBidder",
      "fetchBlindBidItemsByBidder(address):((bool,uint256,uint256,uint256,uint256,address,address)[])",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketBids__fetchBlindBidItemsByBidderResultValue0Struct
      >()
    );
  }

  refundBid(bidId: BigInt): boolean {
    let result = super.call("refundBid", "refundBid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(bidId)
    ]);

    return result[0].toBoolean();
  }

  try_refundBid(bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("refundBid", "refundBid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(bidId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleAdd(): Address {
    let result = super.call("roleAdd", "roleAdd():(address)", []);

    return result[0].toAddress();
  }

  try_roleAdd(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleAdd", "roleAdd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setBidMinimum(minWei: BigInt): boolean {
    let result = super.call("setBidMinimum", "setBidMinimum(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(minWei)
    ]);

    return result[0].toBoolean();
  }

  try_setBidMinimum(minWei: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setBidMinimum",
      "setBidMinimum(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(minWei)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawBid(bidId: Array<BigInt>, isBlind: Array<boolean>): boolean {
    let result = super.call(
      "withdrawBid",
      "withdrawBid(uint256[],bool[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(bidId),
        ethereum.Value.fromBooleanArray(isBlind)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawBid(
    bidId: Array<BigInt>,
    isBlind: Array<boolean>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawBid",
      "withdrawBid(uint256[],bool[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(bidId),
        ethereum.Value.fromBooleanArray(isBlind)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get role(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBidForNftCall extends ethereum.Call {
  get inputs(): AcceptBidForNftCall__Inputs {
    return new AcceptBidForNftCall__Inputs(this);
  }

  get outputs(): AcceptBidForNftCall__Outputs {
    return new AcceptBidForNftCall__Outputs(this);
  }
}

export class AcceptBidForNftCall__Inputs {
  _call: AcceptBidForNftCall;

  constructor(call: AcceptBidForNftCall) {
    this._call = call;
  }

  get bidId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class AcceptBidForNftCall__Outputs {
  _call: AcceptBidForNftCall;

  constructor(call: AcceptBidForNftCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AcceptBlindBidCall extends ethereum.Call {
  get inputs(): AcceptBlindBidCall__Inputs {
    return new AcceptBlindBidCall__Inputs(this);
  }

  get outputs(): AcceptBlindBidCall__Outputs {
    return new AcceptBlindBidCall__Outputs(this);
  }
}

export class AcceptBlindBidCall__Inputs {
  _call: AcceptBlindBidCall;

  constructor(call: AcceptBlindBidCall) {
    this._call = call;
  }

  get blindBidId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get listedId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get is1155(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class AcceptBlindBidCall__Outputs {
  _call: AcceptBlindBidCall;

  constructor(call: AcceptBlindBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnterBidForNftCall extends ethereum.Call {
  get inputs(): EnterBidForNftCall__Inputs {
    return new EnterBidForNftCall__Inputs(this);
  }

  get outputs(): EnterBidForNftCall__Outputs {
    return new EnterBidForNftCall__Outputs(this);
  }
}

export class EnterBidForNftCall__Inputs {
  _call: EnterBidForNftCall;

  constructor(call: EnterBidForNftCall) {
    this._call = call;
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get itemId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get bidValue(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get seller(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class EnterBidForNftCall__Outputs {
  _call: EnterBidForNftCall;

  constructor(call: EnterBidForNftCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnterBlindBidCall extends ethereum.Call {
  get inputs(): EnterBlindBidCall__Inputs {
    return new EnterBlindBidCall__Inputs(this);
  }

  get outputs(): EnterBlindBidCall__Outputs {
    return new EnterBlindBidCall__Outputs(this);
  }
}

export class EnterBlindBidCall__Inputs {
  _call: EnterBlindBidCall;

  constructor(call: EnterBlindBidCall) {
    this._call = call;
  }

  get isSpecific(): Array<boolean> {
    return this._call.inputValues[0].value.toBooleanArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amount1155(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get bidAddress(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class EnterBlindBidCall__Outputs {
  _call: EnterBlindBidCall;

  constructor(call: EnterBlindBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RefundBidCall extends ethereum.Call {
  get inputs(): RefundBidCall__Inputs {
    return new RefundBidCall__Inputs(this);
  }

  get outputs(): RefundBidCall__Outputs {
    return new RefundBidCall__Outputs(this);
  }
}

export class RefundBidCall__Inputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundBidCall__Outputs {
  _call: RefundBidCall;

  constructor(call: RefundBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetBidMinimumCall extends ethereum.Call {
  get inputs(): SetBidMinimumCall__Inputs {
    return new SetBidMinimumCall__Inputs(this);
  }

  get outputs(): SetBidMinimumCall__Outputs {
    return new SetBidMinimumCall__Outputs(this);
  }
}

export class SetBidMinimumCall__Inputs {
  _call: SetBidMinimumCall;

  constructor(call: SetBidMinimumCall) {
    this._call = call;
  }

  get minWei(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBidMinimumCall__Outputs {
  _call: SetBidMinimumCall;

  constructor(call: SetBidMinimumCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get bidId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get isBlind(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
