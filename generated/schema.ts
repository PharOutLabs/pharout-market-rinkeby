// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stats entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stats", id.toString(), this);
    }
  }

  static load(id: string): Stats | null {
    return changetype<Stats | null>(store.get("Stats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get marketItems(): Array<string> | null {
    let value = this.get("marketItems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set marketItems(value: Array<string> | null) {
    if (!value) {
      this.unset("marketItems");
    } else {
      this.set("marketItems", Value.fromStringArray(<Array<string>>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (!value) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offers(): Array<string> | null {
    let value = this.get("offers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offers(value: Array<string> | null) {
    if (!value) {
      this.unset("offers");
    } else {
      this.set("offers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewards(): Array<string> | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewards(value: Array<string> | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromStringArray(<Array<string>>value));
    }
  }

  get mints(): Array<string> | null {
    let value = this.get("mints");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mints(value: Array<string> | null) {
    if (!value) {
      this.unset("mints");
    } else {
      this.set("mints", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MarketItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromString(""));
    this.set("active", Value.fromBoolean(false));
    this.set("type", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("nft", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketItem entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketItem", id.toString(), this);
    }
  }

  static load(id: string): MarketItem | null {
    return changetype<MarketItem | null>(store.get("MarketItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get itemId(): BigInt | null {
    let value = this.get("itemId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set itemId(value: BigInt | null) {
    if (!value) {
      this.unset("itemId");
    } else {
      this.set("itemId", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount1155(): BigInt | null {
    let value = this.get("amount1155");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1155(value: BigInt | null) {
    if (!value) {
      this.unset("amount1155");
    } else {
      this.set("amount1155", Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (!value) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offers(): Array<string> | null {
    let value = this.get("offers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offers(value: Array<string> | null) {
    if (!value) {
      this.unset("offers");
    } else {
      this.set("offers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tradeItem(): Array<string> | null {
    let value = this.get("tradeItem");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tradeItem(value: Array<string> | null) {
    if (!value) {
      this.unset("tradeItem");
    } else {
      this.set("tradeItem", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nft", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Metadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Metadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Metadata", id.toString(), this);
    }
  }

  static load(id: string): Metadata | null {
    return changetype<Metadata | null>(store.get("Metadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contract_type", Value.fromString(""));
    this.set("token_address", Value.fromBytes(Bytes.empty()));
    this.set("token_id", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract_type(): string {
    let value = this.get("contract_type");
    return value!.toString();
  }

  set contract_type(value: string) {
    this.set("contract_type", Value.fromString(value));
  }

  get token_address(): Bytes {
    let value = this.get("token_address");
    return value!.toBytes();
  }

  set token_address(value: Bytes) {
    this.set("token_address", Value.fromBytes(value));
  }

  get token_id(): BigInt {
    let value = this.get("token_id");
    return value!.toBigInt();
  }

  set token_id(value: BigInt) {
    this.set("token_id", Value.fromBigInt(value));
  }

  get owner_of(): Bytes | null {
    let value = this.get("owner_of");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner_of(value: Bytes | null) {
    if (!value) {
      this.unset("owner_of");
    } else {
      this.set("owner_of", Value.fromBytes(<Bytes>value));
    }
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get marketItems(): Array<string> | null {
    let value = this.get("marketItems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set marketItems(value: Array<string> | null) {
    if (!value) {
      this.unset("marketItems");
    } else {
      this.set("marketItems", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token_address", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token_address(): Bytes {
    let value = this.get("token_address");
    return value!.toBytes();
  }

  set token_address(value: Bytes) {
    this.set("token_address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("item", Value.fromString(""));
    this.set("buyer", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("amount1155", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get amount1155(): BigInt {
    let value = this.get("amount1155");
    return value!.toBigInt();
  }

  set amount1155(value: BigInt) {
    this.set("amount1155", Value.fromBigInt(value));
  }
}

export class RedemptionToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("redeemId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedemptionToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RedemptionToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RedemptionToken", id.toString(), this);
    }
  }

  static load(id: string): RedemptionToken | null {
    return changetype<RedemptionToken | null>(store.get("RedemptionToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemId(): BigInt {
    let value = this.get("redeemId");
    return value!.toBigInt();
  }

  set redeemId(value: BigInt) {
    this.set("redeemId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class MintEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("minter", Value.fromString(""));
    this.set("nftId", Value.fromBigInt(BigInt.zero()));
    this.set("redemptionToken", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MintEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MintEvent", id.toString(), this);
    }
  }

  static load(id: string): MintEvent | null {
    return changetype<MintEvent | null>(store.get("MintEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get minter(): string {
    let value = this.get("minter");
    return value!.toString();
  }

  set minter(value: string) {
    this.set("minter", Value.fromString(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    return value!.toBigInt();
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(<BigInt>value));
    }
  }

  get redemptionToken(): BigInt {
    let value = this.get("redemptionToken");
    return value!.toBigInt();
  }

  set redemptionToken(value: BigInt) {
    this.set("redemptionToken", Value.fromBigInt(value));
  }
}

export class Offer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("offerId", Value.fromBigInt(BigInt.zero()));
    this.set("offerer", Value.fromString(""));
    this.set("isSpecific", Value.fromBoolean(false));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
    this.set("accepted", Value.fromBoolean(false));
    this.set("receiver", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Offer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Offer", id.toString(), this);
    }
  }

  static load(id: string): Offer | null {
    return changetype<Offer | null>(store.get("Offer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get offerId(): BigInt {
    let value = this.get("offerId");
    return value!.toBigInt();
  }

  set offerId(value: BigInt) {
    this.set("offerId", Value.fromBigInt(value));
  }

  get offerer(): string {
    let value = this.get("offerer");
    return value!.toString();
  }

  set offerer(value: string) {
    this.set("offerer", Value.fromString(value));
  }

  get isSpecific(): boolean {
    let value = this.get("isSpecific");
    return value!.toBoolean();
  }

  set isSpecific(value: boolean) {
    this.set("isSpecific", Value.fromBoolean(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("bidId", Value.fromBigInt(BigInt.zero()));
    this.set("bidder", Value.fromString(""));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("isSpecific", Value.fromBoolean(false));
    this.set("active", Value.fromBoolean(false));
    this.set("accepted", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bid entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get bidId(): BigInt {
    let value = this.get("bidId");
    return value!.toBigInt();
  }

  set bidId(value: BigInt) {
    this.set("bidId", Value.fromBigInt(value));
  }

  get bidder(): string {
    let value = this.get("bidder");
    return value!.toString();
  }

  set bidder(value: string) {
    this.set("bidder", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get isSpecific(): boolean {
    let value = this.get("isSpecific");
    return value!.toBoolean();
  }

  set isSpecific(value: boolean) {
    this.set("isSpecific", Value.fromBoolean(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("item", Value.fromString(""));
    this.set("tradeItem", Value.fromString(""));
    this.set("tradeId", Value.fromBigInt(BigInt.zero()));
    this.set("trader", Value.fromString(""));
    this.set("isSpecific", Value.fromBoolean(false));
    this.set("active", Value.fromBoolean(false));
    this.set("accepted", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get tradeItem(): string {
    let value = this.get("tradeItem");
    return value!.toString();
  }

  set tradeItem(value: string) {
    this.set("tradeItem", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value!.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): string {
    let value = this.get("trader");
    return value!.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get isSpecific(): boolean {
    let value = this.get("isSpecific");
    return value!.toBoolean();
  }

  set isSpecific(value: boolean) {
    this.set("isSpecific", Value.fromBoolean(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }
}

export class RewardsToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("dayData", Value.fromString(""));
    this.set("hourData", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsToken", id.toString(), this);
    }
  }

  static load(id: string): RewardsToken | null {
    return changetype<RewardsToken | null>(store.get("RewardsToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get dayData(): string {
    let value = this.get("dayData");
    return value!.toString();
  }

  set dayData(value: string) {
    this.set("dayData", Value.fromString(value));
  }

  get hourData(): string {
    let value = this.get("hourData");
    return value!.toString();
  }

  set hourData(value: string) {
    this.set("hourData", Value.fromString(value));
  }
}

export class ClaimedRewards extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("eth", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimedRewards entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimedRewards entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimedRewards", id.toString(), this);
    }
  }

  static load(id: string): ClaimedRewards | null {
    return changetype<ClaimedRewards | null>(store.get("ClaimedRewards", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get eth(): BigInt {
    let value = this.get("eth");
    return value!.toBigInt();
  }

  set eth(value: BigInt) {
    this.set("eth", Value.fromBigInt(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class RewardsUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("userId", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("createdAt", Value.fromString(""));
    this.set("blockCreated", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsUser entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsUser", id.toString(), this);
    }
  }

  static load(id: string): RewardsUser | null {
    return changetype<RewardsUser | null>(store.get("RewardsUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get userId(): BigInt {
    let value = this.get("userId");
    return value!.toBigInt();
  }

  set userId(value: BigInt) {
    this.set("userId", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get blockCreated(): BigInt {
    let value = this.get("blockCreated");
    return value!.toBigInt();
  }

  set blockCreated(value: BigInt) {
    this.set("blockCreated", Value.fromBigInt(value));
  }

  get claims(): Array<string> | null {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set claims(value: Array<string> | null) {
    if (!value) {
      this.unset("claims");
    } else {
      this.set("claims", Value.fromStringArray(<Array<string>>value));
    }
  }

  get alpha(): BigInt | null {
    let value = this.get("alpha");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set alpha(value: BigInt | null) {
    if (!value) {
      this.unset("alpha");
    } else {
      this.set("alpha", Value.fromBigInt(<BigInt>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get omega(): BigInt | null {
    let value = this.get("omega");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set omega(value: BigInt | null) {
    if (!value) {
      this.unset("omega");
    } else {
      this.set("omega", Value.fromBigInt(<BigInt>value));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class ClaimClock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("alpha", Value.fromBigInt(BigInt.zero()));
    this.set("delta", Value.fromBigInt(BigInt.zero()));
    this.set("omega", Value.fromBigInt(BigInt.zero()));
    this.set("totalUsers", Value.fromBigInt(BigInt.zero()));
    this.set("totalDevs", Value.fromBigInt(BigInt.zero()));
    this.set("totalEther", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimClock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimClock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimClock", id.toString(), this);
    }
  }

  static load(id: string): ClaimClock | null {
    return changetype<ClaimClock | null>(store.get("ClaimClock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get alpha(): BigInt {
    let value = this.get("alpha");
    return value!.toBigInt();
  }

  set alpha(value: BigInt) {
    this.set("alpha", Value.fromBigInt(value));
  }

  get delta(): BigInt {
    let value = this.get("delta");
    return value!.toBigInt();
  }

  set delta(value: BigInt) {
    this.set("delta", Value.fromBigInt(value));
  }

  get omega(): BigInt {
    let value = this.get("omega");
    return value!.toBigInt();
  }

  set omega(value: BigInt) {
    this.set("omega", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalDevs(): BigInt {
    let value = this.get("totalDevs");
    return value!.toBigInt();
  }

  set totalDevs(value: BigInt) {
    this.set("totalDevs", Value.fromBigInt(value));
  }

  get totalEther(): BigInt {
    let value = this.get("totalEther");
    return value!.toBigInt();
  }

  set totalEther(value: BigInt) {
    this.set("totalEther", Value.fromBigInt(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class RewardsDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("totalEth", Value.fromBigInt(BigInt.zero()));
    this.set("totalTokens", Value.fromBigInt(BigInt.zero()));
    this.set("totalUsers", Value.fromBigInt(BigInt.zero()));
    this.set("totalNFTHolders", Value.fromBigInt(BigInt.zero()));
    this.set("totalDevs", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimAlpha", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimDelta", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimOmega", Value.fromBigInt(BigInt.zero()));
    this.set("devClaim", Value.fromBigInt(BigInt.zero()));
    this.set("daoClaim", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsDayData", id.toString(), this);
    }
  }

  static load(id: string): RewardsDayData | null {
    return changetype<RewardsDayData | null>(store.get("RewardsDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get totalEth(): BigInt {
    let value = this.get("totalEth");
    return value!.toBigInt();
  }

  set totalEth(value: BigInt) {
    this.set("totalEth", Value.fromBigInt(value));
  }

  get totalTokens(): BigInt {
    let value = this.get("totalTokens");
    return value!.toBigInt();
  }

  set totalTokens(value: BigInt) {
    this.set("totalTokens", Value.fromBigInt(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalNFTHolders(): BigInt {
    let value = this.get("totalNFTHolders");
    return value!.toBigInt();
  }

  set totalNFTHolders(value: BigInt) {
    this.set("totalNFTHolders", Value.fromBigInt(value));
  }

  get totalDevs(): BigInt {
    let value = this.get("totalDevs");
    return value!.toBigInt();
  }

  set totalDevs(value: BigInt) {
    this.set("totalDevs", Value.fromBigInt(value));
  }

  get userClaimAlpha(): BigInt {
    let value = this.get("userClaimAlpha");
    return value!.toBigInt();
  }

  set userClaimAlpha(value: BigInt) {
    this.set("userClaimAlpha", Value.fromBigInt(value));
  }

  get userClaimDelta(): BigInt {
    let value = this.get("userClaimDelta");
    return value!.toBigInt();
  }

  set userClaimDelta(value: BigInt) {
    this.set("userClaimDelta", Value.fromBigInt(value));
  }

  get userClaimOmega(): BigInt {
    let value = this.get("userClaimOmega");
    return value!.toBigInt();
  }

  set userClaimOmega(value: BigInt) {
    this.set("userClaimOmega", Value.fromBigInt(value));
  }

  get devClaim(): BigInt {
    let value = this.get("devClaim");
    return value!.toBigInt();
  }

  set devClaim(value: BigInt) {
    this.set("devClaim", Value.fromBigInt(value));
  }

  get daoClaim(): BigInt {
    let value = this.get("daoClaim");
    return value!.toBigInt();
  }

  set daoClaim(value: BigInt) {
    this.set("daoClaim", Value.fromBigInt(value));
  }
}

export class RewardsHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("totalEth", Value.fromBigInt(BigInt.zero()));
    this.set("totalTokens", Value.fromBigInt(BigInt.zero()));
    this.set("totalUsers", Value.fromBigInt(BigInt.zero()));
    this.set("totalNFTHolders", Value.fromBigInt(BigInt.zero()));
    this.set("totalDevs", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimAlpha", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimDelta", Value.fromBigInt(BigInt.zero()));
    this.set("userClaimOmega", Value.fromBigInt(BigInt.zero()));
    this.set("devClaim", Value.fromBigInt(BigInt.zero()));
    this.set("daoClaim", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsHourData", id.toString(), this);
    }
  }

  static load(id: string): RewardsHourData | null {
    return changetype<RewardsHourData | null>(store.get("RewardsHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get totalEth(): BigInt {
    let value = this.get("totalEth");
    return value!.toBigInt();
  }

  set totalEth(value: BigInt) {
    this.set("totalEth", Value.fromBigInt(value));
  }

  get totalTokens(): BigInt {
    let value = this.get("totalTokens");
    return value!.toBigInt();
  }

  set totalTokens(value: BigInt) {
    this.set("totalTokens", Value.fromBigInt(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalNFTHolders(): BigInt {
    let value = this.get("totalNFTHolders");
    return value!.toBigInt();
  }

  set totalNFTHolders(value: BigInt) {
    this.set("totalNFTHolders", Value.fromBigInt(value));
  }

  get totalDevs(): BigInt {
    let value = this.get("totalDevs");
    return value!.toBigInt();
  }

  set totalDevs(value: BigInt) {
    this.set("totalDevs", Value.fromBigInt(value));
  }

  get userClaimAlpha(): BigInt {
    let value = this.get("userClaimAlpha");
    return value!.toBigInt();
  }

  set userClaimAlpha(value: BigInt) {
    this.set("userClaimAlpha", Value.fromBigInt(value));
  }

  get userClaimDelta(): BigInt {
    let value = this.get("userClaimDelta");
    return value!.toBigInt();
  }

  set userClaimDelta(value: BigInt) {
    this.set("userClaimDelta", Value.fromBigInt(value));
  }

  get userClaimOmega(): BigInt {
    let value = this.get("userClaimOmega");
    return value!.toBigInt();
  }

  set userClaimOmega(value: BigInt) {
    this.set("userClaimOmega", Value.fromBigInt(value));
  }

  get devClaim(): BigInt {
    let value = this.get("devClaim");
    return value!.toBigInt();
  }

  set devClaim(value: BigInt) {
    this.set("devClaim", Value.fromBigInt(value));
  }

  get daoClaim(): BigInt {
    let value = this.get("daoClaim");
    return value!.toBigInt();
  }

  set daoClaim(value: BigInt) {
    this.set("daoClaim", Value.fromBigInt(value));
  }
}
