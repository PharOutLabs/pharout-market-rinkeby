// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BlindTradeAccepted extends ethereum.Event {
  get params(): BlindTradeAccepted__Params {
    return new BlindTradeAccepted__Params(this);
  }
}

export class BlindTradeAccepted__Params {
  _event: BlindTradeAccepted;

  constructor(event: BlindTradeAccepted) {
    this._event = event;
  }

  get is1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get isActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get itemId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class BlindTradeEntered extends ethereum.Event {
  get params(): BlindTradeEntered__Params {
    return new BlindTradeEntered__Params(this);
  }
}

export class BlindTradeEntered__Params {
  _event: BlindTradeEntered;

  constructor(event: BlindTradeEntered) {
    this._event = event;
  }

  get isWanted1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get isGiven1155(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get isSpecific(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get wantedId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount1155(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get wAmount1155(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get wantCont(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class FundsForwarded extends ethereum.Event {
  get params(): FundsForwarded__Params {
    return new FundsForwarded__Params(this);
  }
}

export class FundsForwarded__Params {
  _event: FundsForwarded;

  constructor(event: FundsForwarded) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TradeAccepted extends ethereum.Event {
  get params(): TradeAccepted__Params {
    return new TradeAccepted__Params(this);
  }
}

export class TradeAccepted__Params {
  _event: TradeAccepted;

  constructor(event: TradeAccepted) {
    this._event = event;
  }

  get is1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get isActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get itemId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class TradeEntered extends ethereum.Event {
  get params(): TradeEntered__Params {
    return new TradeEntered__Params(this);
  }
}

export class TradeEntered__Params {
  _event: TradeEntered;

  constructor(event: TradeEntered) {
    this._event = event;
  }

  get is1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1155(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class TradeUpdated extends ethereum.Event {
  get params(): TradeUpdated__Params {
    return new TradeUpdated__Params(this);
  }
}

export class TradeUpdated__Params {
  _event: TradeUpdated;

  constructor(event: TradeUpdated) {
    this._event = event;
  }

  get is1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get isActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get itemId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class TradeWithdrawn extends ethereum.Event {
  get params(): TradeWithdrawn__Params {
    return new TradeWithdrawn__Params(this);
  }
}

export class TradeWithdrawn__Params {
  _event: TradeWithdrawn;

  constructor(event: TradeWithdrawn) {
    this._event = event;
  }

  get is1155(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nftCont(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class MarketTrades__fetchBlindTradesResultValue0Struct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get isWant1155(): boolean {
    return this[1].toBoolean();
  }

  get isActive(): boolean {
    return this[2].toBoolean();
  }

  get isSpecific(): boolean {
    return this[3].toBoolean();
  }

  get wantedId(): BigInt {
    return this[4].toBigInt();
  }

  get tradeId(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get amount1155(): BigInt {
    return this[7].toBigInt();
  }

  get wAmount1155(): BigInt {
    return this[8].toBigInt();
  }

  get nftCont(): Address {
    return this[9].toAddress();
  }

  get wantCont(): Address {
    return this[10].toAddress();
  }

  get trader(): Address {
    return this[11].toAddress();
  }
}

export class MarketTrades__fetchTradeResultItemStruct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get itemId(): BigInt {
    return this[1].toBigInt();
  }

  get tradeId(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get nftCont(): Address {
    return this[5].toAddress();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get seller(): Address {
    return this[7].toAddress();
  }
}

export class MarketTrades__fetchTradesResultValue0Struct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get itemId(): BigInt {
    return this[1].toBigInt();
  }

  get tradeId(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get nftCont(): Address {
    return this[5].toAddress();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get seller(): Address {
    return this[7].toAddress();
  }
}

export class MarketTrades__fetchTradesByIdResultValue0Struct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get itemId(): BigInt {
    return this[1].toBigInt();
  }

  get tradeId(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get nftCont(): Address {
    return this[5].toAddress();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get seller(): Address {
    return this[7].toAddress();
  }
}

export class MarketTrades__fetchUserBlindTradesResultValue0Struct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get isWant1155(): boolean {
    return this[1].toBoolean();
  }

  get isActive(): boolean {
    return this[2].toBoolean();
  }

  get isSpecific(): boolean {
    return this[3].toBoolean();
  }

  get wantedId(): BigInt {
    return this[4].toBigInt();
  }

  get tradeId(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get amount1155(): BigInt {
    return this[7].toBigInt();
  }

  get wAmount1155(): BigInt {
    return this[8].toBigInt();
  }

  get nftCont(): Address {
    return this[9].toAddress();
  }

  get wantCont(): Address {
    return this[10].toAddress();
  }

  get trader(): Address {
    return this[11].toAddress();
  }
}

export class MarketTrades__fetchUserTradesResultValue0Struct extends ethereum.Tuple {
  get is1155(): boolean {
    return this[0].toBoolean();
  }

  get itemId(): BigInt {
    return this[1].toBigInt();
  }

  get tradeId(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount1155(): BigInt {
    return this[4].toBigInt();
  }

  get nftCont(): Address {
    return this[5].toAddress();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get seller(): Address {
    return this[7].toAddress();
  }
}

export class MarketTrades extends ethereum.SmartContract {
  static bind(address: Address): MarketTrades {
    return new MarketTrades("MarketTrades", address);
  }

  BIDS(): Bytes {
    let result = super.call("BIDS", "BIDS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BIDS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BIDS", "BIDS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEV(): Bytes {
    let result = super.call("DEV", "DEV():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEV(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEV", "DEV():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MARKET(): Bytes {
    let result = super.call("MARKET", "MARKET():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MARKET(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MARKET", "MARKET():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OFFERS(): Bytes {
    let result = super.call("OFFERS", "OFFERS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OFFERS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OFFERS", "OFFERS():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROXY_ROLE(): Bytes {
    let result = super.call("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PROXY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  acceptBlindTrade(
    tradeId: Array<BigInt>,
    tokenId: Array<BigInt>,
    listedId: Array<BigInt>
  ): boolean {
    let result = super.call(
      "acceptBlindTrade",
      "acceptBlindTrade(uint256[],uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(tradeId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromUnsignedBigIntArray(listedId)
      ]
    );

    return result[0].toBoolean();
  }

  try_acceptBlindTrade(
    tradeId: Array<BigInt>,
    tokenId: Array<BigInt>,
    listedId: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptBlindTrade",
      "acceptBlindTrade(uint256[],uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(tradeId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromUnsignedBigIntArray(listedId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  acceptTrade(itemId: Array<BigInt>, tradeId: Array<BigInt>): boolean {
    let result = super.call(
      "acceptTrade",
      "acceptTrade(uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tradeId)
      ]
    );

    return result[0].toBoolean();
  }

  try_acceptTrade(
    itemId: Array<BigInt>,
    tradeId: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptTrade",
      "acceptTrade(uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tradeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enterTrade(
    amount1155: Array<BigInt>,
    itemId: Array<BigInt>,
    tokenId: Array<BigInt>,
    nftContract: Array<Address>,
    seller: Array<Address>
  ): boolean {
    let result = super.call(
      "enterTrade",
      "enterTrade(uint256[],uint256[],uint256[],address[],address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amount1155),
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromAddressArray(nftContract),
        ethereum.Value.fromAddressArray(seller)
      ]
    );

    return result[0].toBoolean();
  }

  try_enterTrade(
    amount1155: Array<BigInt>,
    itemId: Array<BigInt>,
    tokenId: Array<BigInt>,
    nftContract: Array<Address>,
    seller: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enterTrade",
      "enterTrade(uint256[],uint256[],uint256[],address[],address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amount1155),
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tokenId),
        ethereum.Value.fromAddressArray(nftContract),
        ethereum.Value.fromAddressArray(seller)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fetchBlindTrades(): Array<MarketTrades__fetchBlindTradesResultValue0Struct> {
    let result = super.call(
      "fetchBlindTrades",
      "fetchBlindTrades():((bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256,address,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      MarketTrades__fetchBlindTradesResultValue0Struct
    >();
  }

  try_fetchBlindTrades(): ethereum.CallResult<
    Array<MarketTrades__fetchBlindTradesResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchBlindTrades",
      "fetchBlindTrades():((bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256,address,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketTrades__fetchBlindTradesResultValue0Struct>()
    );
  }

  fetchTrade(itemId: BigInt): MarketTrades__fetchTradeResultItemStruct {
    let result = super.call(
      "fetchTrade",
      "fetchTrade(uint256):((bool,uint256,uint256,uint256,uint256,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return changetype<MarketTrades__fetchTradeResultItemStruct>(
      result[0].toTuple()
    );
  }

  try_fetchTrade(
    itemId: BigInt
  ): ethereum.CallResult<MarketTrades__fetchTradeResultItemStruct> {
    let result = super.tryCall(
      "fetchTrade",
      "fetchTrade(uint256):((bool,uint256,uint256,uint256,uint256,address,address,address))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketTrades__fetchTradeResultItemStruct>(value[0].toTuple())
    );
  }

  fetchTradeId(itemId: BigInt): BigInt {
    let result = super.call("fetchTradeId", "fetchTradeId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(itemId)
    ]);

    return result[0].toBigInt();
  }

  try_fetchTradeId(itemId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchTradeId",
      "fetchTradeId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchTrades(): Array<MarketTrades__fetchTradesResultValue0Struct> {
    let result = super.call(
      "fetchTrades",
      "fetchTrades():((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      MarketTrades__fetchTradesResultValue0Struct
    >();
  }

  try_fetchTrades(): ethereum.CallResult<
    Array<MarketTrades__fetchTradesResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchTrades",
      "fetchTrades():((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketTrades__fetchTradesResultValue0Struct>()
    );
  }

  fetchTradesById(
    itemId: BigInt
  ): Array<MarketTrades__fetchTradesByIdResultValue0Struct> {
    let result = super.call(
      "fetchTradesById",
      "fetchTradesById(uint256):((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return result[0].toTupleArray<
      MarketTrades__fetchTradesByIdResultValue0Struct
    >();
  }

  try_fetchTradesById(
    itemId: BigInt
  ): ethereum.CallResult<
    Array<MarketTrades__fetchTradesByIdResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchTradesById",
      "fetchTradesById(uint256):((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketTrades__fetchTradesByIdResultValue0Struct>()
    );
  }

  fetchUserBlindTrades(
    user: Address
  ): Array<MarketTrades__fetchUserBlindTradesResultValue0Struct> {
    let result = super.call(
      "fetchUserBlindTrades",
      "fetchUserBlindTrades(address):((bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      MarketTrades__fetchUserBlindTradesResultValue0Struct
    >();
  }

  try_fetchUserBlindTrades(
    user: Address
  ): ethereum.CallResult<
    Array<MarketTrades__fetchUserBlindTradesResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchUserBlindTrades",
      "fetchUserBlindTrades(address):((bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketTrades__fetchUserBlindTradesResultValue0Struct
      >()
    );
  }

  fetchUserTrades(
    user: Address
  ): Array<MarketTrades__fetchUserTradesResultValue0Struct> {
    let result = super.call(
      "fetchUserTrades",
      "fetchUserTrades(address):((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      MarketTrades__fetchUserTradesResultValue0Struct
    >();
  }

  try_fetchUserTrades(
    user: Address
  ): ethereum.CallResult<
    Array<MarketTrades__fetchUserTradesResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchUserTrades",
      "fetchUserTrades(address):((bool,uint256,uint256,uint256,uint256,address,address,address)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketTrades__fetchUserTradesResultValue0Struct>()
    );
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  refundTrade(itemId: BigInt, tradeId: BigInt): boolean {
    let result = super.call(
      "refundTrade",
      "refundTrade(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(tradeId)
      ]
    );

    return result[0].toBoolean();
  }

  try_refundTrade(
    itemId: BigInt,
    tradeId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "refundTrade",
      "refundTrade(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(itemId),
        ethereum.Value.fromUnsignedBigInt(tradeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleAdd(): Address {
    let result = super.call("roleAdd", "roleAdd():(address)", []);

    return result[0].toAddress();
  }

  try_roleAdd(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleAdd", "roleAdd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawTrade(
    isBlind: Array<boolean>,
    itemId: Array<BigInt>,
    tradeId: Array<BigInt>
  ): boolean {
    let result = super.call(
      "withdrawTrade",
      "withdrawTrade(bool[],uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromBooleanArray(isBlind),
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tradeId)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawTrade(
    isBlind: Array<boolean>,
    itemId: Array<BigInt>,
    tradeId: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawTrade",
      "withdrawTrade(bool[],uint256[],uint256[]):(bool)",
      [
        ethereum.Value.fromBooleanArray(isBlind),
        ethereum.Value.fromUnsignedBigIntArray(itemId),
        ethereum.Value.fromUnsignedBigIntArray(tradeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get role(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBlindTradeCall extends ethereum.Call {
  get inputs(): AcceptBlindTradeCall__Inputs {
    return new AcceptBlindTradeCall__Inputs(this);
  }

  get outputs(): AcceptBlindTradeCall__Outputs {
    return new AcceptBlindTradeCall__Outputs(this);
  }
}

export class AcceptBlindTradeCall__Inputs {
  _call: AcceptBlindTradeCall;

  constructor(call: AcceptBlindTradeCall) {
    this._call = call;
  }

  get tradeId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get listedId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AcceptBlindTradeCall__Outputs {
  _call: AcceptBlindTradeCall;

  constructor(call: AcceptBlindTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AcceptTradeCall extends ethereum.Call {
  get inputs(): AcceptTradeCall__Inputs {
    return new AcceptTradeCall__Inputs(this);
  }

  get outputs(): AcceptTradeCall__Outputs {
    return new AcceptTradeCall__Outputs(this);
  }
}

export class AcceptTradeCall__Inputs {
  _call: AcceptTradeCall;

  constructor(call: AcceptTradeCall) {
    this._call = call;
  }

  get itemId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get tradeId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AcceptTradeCall__Outputs {
  _call: AcceptTradeCall;

  constructor(call: AcceptTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnterBlindTradeCall extends ethereum.Call {
  get inputs(): EnterBlindTradeCall__Inputs {
    return new EnterBlindTradeCall__Inputs(this);
  }

  get outputs(): EnterBlindTradeCall__Outputs {
    return new EnterBlindTradeCall__Outputs(this);
  }
}

export class EnterBlindTradeCall__Inputs {
  _call: EnterBlindTradeCall;

  constructor(call: EnterBlindTradeCall) {
    this._call = call;
  }

  get isWanted1155(): Array<boolean> {
    return this._call.inputValues[0].value.toBooleanArray();
  }

  get isGiven1155(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }

  get isSpecific(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }

  get wantedId(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get amount1155(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get wAmount1155(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get nftContract(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }

  get wantContract(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class EnterBlindTradeCall__Outputs {
  _call: EnterBlindTradeCall;

  constructor(call: EnterBlindTradeCall) {
    this._call = call;
  }
}

export class EnterTradeCall extends ethereum.Call {
  get inputs(): EnterTradeCall__Inputs {
    return new EnterTradeCall__Inputs(this);
  }

  get outputs(): EnterTradeCall__Outputs {
    return new EnterTradeCall__Outputs(this);
  }
}

export class EnterTradeCall__Inputs {
  _call: EnterTradeCall;

  constructor(call: EnterTradeCall) {
    this._call = call;
  }

  get amount1155(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get itemId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get nftContract(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get seller(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class EnterTradeCall__Outputs {
  _call: EnterTradeCall;

  constructor(call: EnterTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RefundTradeCall extends ethereum.Call {
  get inputs(): RefundTradeCall__Inputs {
    return new RefundTradeCall__Inputs(this);
  }

  get outputs(): RefundTradeCall__Outputs {
    return new RefundTradeCall__Outputs(this);
  }
}

export class RefundTradeCall__Inputs {
  _call: RefundTradeCall;

  constructor(call: RefundTradeCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tradeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RefundTradeCall__Outputs {
  _call: RefundTradeCall;

  constructor(call: RefundTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawTradeCall extends ethereum.Call {
  get inputs(): WithdrawTradeCall__Inputs {
    return new WithdrawTradeCall__Inputs(this);
  }

  get outputs(): WithdrawTradeCall__Outputs {
    return new WithdrawTradeCall__Outputs(this);
  }
}

export class WithdrawTradeCall__Inputs {
  _call: WithdrawTradeCall;

  constructor(call: WithdrawTradeCall) {
    this._call = call;
  }

  get isBlind(): Array<boolean> {
    return this._call.inputValues[0].value.toBooleanArray();
  }

  get itemId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tradeId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class WithdrawTradeCall__Outputs {
  _call: WithdrawTradeCall;

  constructor(call: WithdrawTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
